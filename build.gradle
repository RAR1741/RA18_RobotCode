plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "jaci.openrio.gradle.GradleRIO" version "2018.01.07"
    id "org.junit.platform.gradle.plugin" version "1.0.2"
}

def ROBOT_CLASS = "org.redalert1741.powerup.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    println "Connecting to: " + TEAM
        targets {
        target("roborio", jaci.openrio.gradle.frc.RoboRIO) {
            team = Integer.parseInt(TEAM)
        }
    }
    artifacts {
        artifact('frcJava', jaci.openrio.gradle.frc.FRCJavaArtifact) {
            targets << "roborio"
        }
    }
}

repositories {
    mavenCentral()
}

// Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
// and NavX.
dependencies {
    compile wpilib()
    compile ctre()
    compile navx()
    compile openrio.powerup.matchData()
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    compile group: 'org.junit.platform', name: 'junit-platform-gradle-plugin', version: '1.0.2'
    // compile group: 'org.apache.logging.log4j.jul.LogManager'
    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.2")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.2")
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest jaci.openrio.gradle.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

junitPlatform {
  platformVersion '1.0.2'
  filters {
    engines {
      include 'junit-jupiter', 'junit-vintage'
      // exclude 'custom-engine'
    }
    tags {
      include 'fast'
    }
    // includeClassNamePattern '.*Test'
  }
  // logManager 'org.apache.logging.log4j.jul.LogManager'
}
